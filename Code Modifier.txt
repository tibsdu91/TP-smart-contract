// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.24;

import "./Ownable.sol";   // Gestion propriétaire (sécurité accès)
import "./SafeMath.sol";  // Évite les débordements (sécurité calculs)
import "./Whitelist.sol"; // Vérification autorisation (sécurité vote)

contract Election is Ownable, Whitelist {

    using SafeMath for uint256;

    // Modèle du candidat
    struct Candidate {
        uint256 id;
        string name;
        uint voteCount;
    }

    mapping(address => bool) public voters;     // Électeurs ayant voté
    mapping(uint => Candidate) public candidates; // Stockage des candidats
    uint public candidatesCount;                // Nombre total candidats

    event votedEvent (uint indexed _candidateId); // Événement vote effectué

    // Ajout candidat (sécurisé uniquement pour le propriétaire)
    function addCandidate (string memory _name) public onlyOwner {
        candidatesCount = candidatesCount.add(1);
        candidates[candidatesCount] = Candidate(candidatesCount, _name, 0);
    }

    // Fonction de vote (sécurisé par liste blanche)
    function vote (uint _candidateId) public {
        require(isWhitelisted(msg.sender), "Non autorise");   // Vérification whitelist
        require(!voters[msg.sender], "Deja vote");            // Un seul vote par électeur
        require(_candidateId > 0 && _candidateId <= candidatesCount, "Invalide"); // Candidat valide

        voters[msg.sender] = true; // Marque électeur ayant voté
        candidates[_candidateId].voteCount = candidates[_candidateId].voteCount.add(1); // Ajoute un vote

        emit votedEvent (_candidateId); // Déclenche événement vote
    }
}
